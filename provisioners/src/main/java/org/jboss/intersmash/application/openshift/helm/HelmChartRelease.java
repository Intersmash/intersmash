/*
 * Copyright (C) 2023 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jboss.intersmash.application.openshift.helm;

import java.nio.file.Path;
import java.util.List;

import org.jboss.intersmash.provision.helm.HelmChartOpenShiftProvisioner;

/**
 * Defines the contract for implementing classes to represent a Helm Charts release, as seen by the provisioning
 * tooling.
 */
/**
 * Defines the contract for implementing classes to represent a Helm Charts release, as seen by the provisioning
 * tooling.
 */
public interface HelmChartRelease extends SerializableHelmChartRelease {

	/**
	 * Read the number of replicas that the release should generate
	 * The provisioner reads this values during the provisioning life cycle, e.g.: when waiting for the expected
	 * number of replicas to be ready after deploying.
	 *
	 * @return {@link Integer} representing the number of replicas that the release should generate
	 */
	Integer getReplicas();

	/**
	 * Set the number of replicas that should be generated by the release
	 * The provisioner sets this values when scaling up or down, see
	 * {@link HelmChartOpenShiftProvisioner#scale(int, boolean)}.
	 *
	 * @param replicas Number of replicas that should be generated by the release
	 */
	void setReplicas(Integer replicas);

	/**
	 * Access the additional values files collection
	 * The provisioner will try to add a file to the helm `install/upgrade` command for each item in this list
	 *
	 * @return List of {@link Path} instances representing the location of additional values files that make the
	 * release
	 */
	List<Path> getAdditionalValuesFiles();
}
